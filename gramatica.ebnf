programa ::= { unidade } EOF ;

unidade ::= declaracao | comando ;

(* Declarações *)
declaracao ::= decl_variavel | decl_funcao | decl_dataset | registrador_decl | sensor_decl ;

decl_variavel ::= "decl" ( "val" | "var" ) identificador [ ":" tipo ] ":=" expressao ";" ;
registrador_decl ::= "reg" ( "val" | "var" ) identificador [ ":" tipo ] ":=" expressao ";" ;
sensor_decl      ::= "sensor" identificador ":" tipo ";" ;

tipo ::= "int" | "float" | "bool" | "string" | "lista" ;

decl_funcao ::= "funcao" identificador "(" [ lista_parametros ] ")" bloco ;

lista_parametros ::= identificador { "," identificador } ;

decl_dataset ::= "dataset" string "{" campos_dataset "}" ";" ;
campos_dataset ::= campo_dataset { "," campo_dataset } ;
campo_dataset ::= identificador ":" lista ;

(* Comandos / statements *)
comando ::= atribuicao
          | mostrar
          | ler
          | se_senao
          | enquanto
          | retorno
          | bloco
          | expressao ";" ;

atribuicao ::= identificador ":=" expressao ";" ;

mostrar ::= "mostrar" "(" expressao { "," expressao } ")" ";" ;
ler ::= identificador ":=" "ler" "()" ";" ;

retorno ::= "retorna" expressao ";" ;

se_senao ::= "se" "(" expressao ")" bloco [ "senao" bloco ] ;

enquanto ::= "enquanto" "(" expressao ")" bloco ;

bloco ::= "{" { declaracao | comando } "}" ;

(* Expressões e precedência *)
expressao ::= pipeline ;

pipeline ::= aplicacao { "->>" aplicacao } ;

aplicacao ::= membro { "(" [ lista_argumentos ] ")" } ;

lista_argumentos ::= expressao { "," expressao } ;

membro ::= operacao_binaria ;

operacao_binaria ::= logico_ou ;

logico_ou ::= logico_e { ( "ou" | "||" ) logico_e } ;
logico_e ::= igualdade { ( "e" | "&&" ) igualdade } ;
igualdade ::= relacional { ( "==" | "!=" | "eh" ) relacional } ;
relacional ::= aditiva { ( "<" | ">" | "<=" | ">=" ) aditiva } ;
aditiva ::= multiplicativa { ( "+" | "-" ) multiplicativa } ;
multiplicativa ::= unaria { ( "*" | "/" | "%" ) unaria } ;
unaria ::= ( "nao" | "!" | "-" ) unaria | primario ;

primario ::= numero
           | texto
           | identificador
           | "(" expressao ")"
           | lista
           | tabela
           | chamada_estatistica
           | acesso_coluna ;

lista ::= "[" [ lista_expressoes ] "]" ;
lista_expressoes ::= expressao { "," expressao } ;

tabela ::= "{" campos_tabela "}" ;
campos_tabela ::= campo_tabela { "," campo_tabela } ;
campo_tabela ::= identificador ":" lista ;

chamada_estatistica ::= "#" identificador "(" expressao_or_lista ")" ;
expressao_or_lista ::= expressao | lista | identificador ;

acesso_coluna ::= identificador "." identificador ; (* ex: leituras.chuva *)

numero ::= digito { digito } [ "." digito { digito } ] ;
texto ::= "\"" { caractere } "\"" ;

identificador ::= letra { letra | digito | "_" } ;

digito ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

letra ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j"
        | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t"
        | "u" | "v" | "w" | "x" | "y" | "z"
        | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J"
        | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T"
        | "U" | "V" | "W" | "X" | "Y" | "Z" ;

caractere ::= letra | digito | " " | "!" | "?" | "," | "." | "+" | "-" | "*" | "/" ;

comentario ::= "#" { caractere } ( "\n" | EOF )
             | "//" { caractere } ( "\n" | EOF )
             | "/*" { caractere } "*/" ;
